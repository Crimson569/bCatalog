// <auto-generated />
using System;
using AuthService.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AuthService.Persistence.Migrations
{
    [DbContext(typeof(AuthServiceDbContext))]
    [Migration("20251008145457_RoleConfigurationErrorFix")]
    partial class RoleConfigurationErrorFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthService.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PermissionName")
                        .IsUnique();

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("db8c6617-8ce7-40ab-9894-769038cf65a6"),
                            CreatedAt = new DateTime(2025, 10, 8, 14, 54, 56, 511, DateTimeKind.Utc).AddTicks(677),
                            PermissionName = "PostBook",
                            UpdatedAt = new DateTime(2025, 10, 8, 14, 54, 56, 511, DateTimeKind.Utc).AddTicks(677)
                        },
                        new
                        {
                            Id = new Guid("1236fa18-0a82-4185-adc2-6fdf5f6596a2"),
                            CreatedAt = new DateTime(2025, 10, 8, 14, 54, 56, 511, DateTimeKind.Utc).AddTicks(1809),
                            PermissionName = "ReadBook",
                            UpdatedAt = new DateTime(2025, 10, 8, 14, 54, 56, 511, DateTimeKind.Utc).AddTicks(1809)
                        },
                        new
                        {
                            Id = new Guid("9a378d7a-3aae-495a-91da-ce6e9f3644a8"),
                            CreatedAt = new DateTime(2025, 10, 8, 14, 54, 56, 511, DateTimeKind.Utc).AddTicks(1903),
                            PermissionName = "UpdateBook",
                            UpdatedAt = new DateTime(2025, 10, 8, 14, 54, 56, 511, DateTimeKind.Utc).AddTicks(1903)
                        },
                        new
                        {
                            Id = new Guid("ed14b72b-fa5a-41e7-8fa8-2a8783486b64"),
                            CreatedAt = new DateTime(2025, 10, 8, 14, 54, 56, 511, DateTimeKind.Utc).AddTicks(1906),
                            PermissionName = "DeleteBook",
                            UpdatedAt = new DateTime(2025, 10, 8, 14, 54, 56, 511, DateTimeKind.Utc).AddTicks(1906)
                        });
                });

            modelBuilder.Entity("AuthService.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1fd0ebe-0cfe-4dfb-8d2d-395e0b431e0a"),
                            CreatedAt = new DateTime(2025, 10, 8, 14, 54, 56, 513, DateTimeKind.Utc).AddTicks(5763),
                            RoleName = "Admin",
                            UpdatedAt = new DateTime(2025, 10, 8, 14, 54, 56, 513, DateTimeKind.Utc).AddTicks(5763)
                        },
                        new
                        {
                            Id = new Guid("1cf281d9-f144-48ac-8b57-73876816522b"),
                            CreatedAt = new DateTime(2025, 10, 8, 14, 54, 56, 513, DateTimeKind.Utc).AddTicks(5856),
                            RoleName = "Reader",
                            UpdatedAt = new DateTime(2025, 10, 8, 14, 54, 56, 513, DateTimeKind.Utc).AddTicks(5856)
                        });
                });

            modelBuilder.Entity("AuthService.Domain.Entities.RolePermissionEntity", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissionEntity");
                });

            modelBuilder.Entity("AuthService.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("AuthService.Domain.Entities.RolePermissionEntity", b =>
                {
                    b.HasOne("AuthService.Domain.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthService.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("AuthService.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthService.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
