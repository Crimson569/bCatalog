// <auto-generated />
using System;
using AuthService.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AuthService.Persistence.Migrations
{
    [DbContext(typeof(AuthServiceDbContext))]
    [Migration("20251012165442_AddedRolesAndPermissionsActionsPermissions")]
    partial class AddedRolesAndPermissionsActionsPermissions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthService.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PermissionName")
                        .IsUnique();

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c88ac6ae-0190-4d94-b081-071169a20b9f"),
                            CreatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(7215),
                            PermissionName = "PostBook",
                            UpdatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(7215)
                        },
                        new
                        {
                            Id = new Guid("7b99fe3e-a58f-4f3a-b117-a35a15ed7d8f"),
                            CreatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8367),
                            PermissionName = "ReadBook",
                            UpdatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8367)
                        },
                        new
                        {
                            Id = new Guid("9369aa9a-bb79-4b3b-9e14-57ce4d7952d2"),
                            CreatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8439),
                            PermissionName = "UpdateBook",
                            UpdatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8439)
                        },
                        new
                        {
                            Id = new Guid("160dba9f-a165-4064-8980-9bfc350d0261"),
                            CreatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8442),
                            PermissionName = "DeleteBook",
                            UpdatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8442)
                        },
                        new
                        {
                            Id = new Guid("e9dac16b-39f0-4dcf-a850-39bbeea7fd09"),
                            CreatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8444),
                            PermissionName = "CreateUser",
                            UpdatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8444)
                        },
                        new
                        {
                            Id = new Guid("2e9c5133-9e36-44f8-8b2f-e1963ec3207a"),
                            CreatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8450),
                            PermissionName = "GetUsers",
                            UpdatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8450)
                        },
                        new
                        {
                            Id = new Guid("dfe6977a-e0b3-4ee5-89d8-c3b0aab43d7a"),
                            CreatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8452),
                            PermissionName = "UpdateUsers",
                            UpdatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8452)
                        },
                        new
                        {
                            Id = new Guid("5aabf6f9-4c24-432e-b395-75a6be33b4f0"),
                            CreatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8453),
                            PermissionName = "DeleteUsers",
                            UpdatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8453)
                        },
                        new
                        {
                            Id = new Guid("1fd34a1f-4677-4df7-aa80-b73eb3eb1fb4"),
                            CreatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8460),
                            PermissionName = "CreateRole",
                            UpdatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8460)
                        },
                        new
                        {
                            Id = new Guid("453a3fd1-5e65-4609-a150-1743975bb1b7"),
                            CreatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8464),
                            PermissionName = "GetRoles",
                            UpdatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8464)
                        },
                        new
                        {
                            Id = new Guid("60720ce7-bf9a-4b74-b68e-399dbec622d8"),
                            CreatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8466),
                            PermissionName = "UpdateRoles",
                            UpdatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8466)
                        },
                        new
                        {
                            Id = new Guid("e5e5a53f-52d5-404a-a98f-c7b9fb441223"),
                            CreatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8468),
                            PermissionName = "DeleteRoles",
                            UpdatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8468)
                        },
                        new
                        {
                            Id = new Guid("d45e6052-2206-4f4b-a846-ca0fe6a32bd5"),
                            CreatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8470),
                            PermissionName = "CreatePermission",
                            UpdatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8470)
                        },
                        new
                        {
                            Id = new Guid("dedb6bdf-2c55-4ccc-befc-e62ce0fbedf5"),
                            CreatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8471),
                            PermissionName = "GetPermissions",
                            UpdatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8471)
                        },
                        new
                        {
                            Id = new Guid("7973ae6a-fe37-4389-874e-0ec963015bf7"),
                            CreatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8473),
                            PermissionName = "UpdatePermissions",
                            UpdatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8473)
                        },
                        new
                        {
                            Id = new Guid("f9bcf4e2-f468-4d3a-ba73-95259d697e8a"),
                            CreatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8475),
                            PermissionName = "DeletePermissions",
                            UpdatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 727, DateTimeKind.Utc).AddTicks(8475)
                        });
                });

            modelBuilder.Entity("AuthService.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ac4a6ca0-8aee-4603-8e72-a5c30c1f6b32"),
                            CreatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 730, DateTimeKind.Utc).AddTicks(237),
                            RoleName = "Admin",
                            UpdatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 730, DateTimeKind.Utc).AddTicks(237)
                        },
                        new
                        {
                            Id = new Guid("5e40e037-cdbe-4710-bf8d-a6f69ebba65e"),
                            CreatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 730, DateTimeKind.Utc).AddTicks(393),
                            RoleName = "Reader",
                            UpdatedAt = new DateTime(2025, 10, 12, 16, 54, 41, 730, DateTimeKind.Utc).AddTicks(393)
                        });
                });

            modelBuilder.Entity("AuthService.Domain.Entities.RolePermissionEntity", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissionEntity");
                });

            modelBuilder.Entity("AuthService.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("AuthService.Domain.Entities.RolePermissionEntity", b =>
                {
                    b.HasOne("AuthService.Domain.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthService.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("AuthService.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthService.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
