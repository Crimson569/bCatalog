// <auto-generated />
using System;
using AuthService.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AuthService.Persistence.Migrations
{
    [DbContext(typeof(AuthServiceDbContext))]
    [Migration("20251009154331_UsersActionPermissionsMigration")]
    partial class UsersActionPermissionsMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthService.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PermissionName")
                        .IsUnique();

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("62537d2e-52bf-45d2-8738-dfadd993783c"),
                            CreatedAt = new DateTime(2025, 10, 9, 15, 43, 31, 66, DateTimeKind.Utc).AddTicks(1889),
                            PermissionName = "PostBook",
                            UpdatedAt = new DateTime(2025, 10, 9, 15, 43, 31, 66, DateTimeKind.Utc).AddTicks(1889)
                        },
                        new
                        {
                            Id = new Guid("1b9cd590-14b6-4ae8-a41a-af8913010904"),
                            CreatedAt = new DateTime(2025, 10, 9, 15, 43, 31, 66, DateTimeKind.Utc).AddTicks(2949),
                            PermissionName = "ReadBook",
                            UpdatedAt = new DateTime(2025, 10, 9, 15, 43, 31, 66, DateTimeKind.Utc).AddTicks(2949)
                        },
                        new
                        {
                            Id = new Guid("82f5063e-b1a7-416c-aaf8-8f1990fccc36"),
                            CreatedAt = new DateTime(2025, 10, 9, 15, 43, 31, 66, DateTimeKind.Utc).AddTicks(3021),
                            PermissionName = "UpdateBook",
                            UpdatedAt = new DateTime(2025, 10, 9, 15, 43, 31, 66, DateTimeKind.Utc).AddTicks(3021)
                        },
                        new
                        {
                            Id = new Guid("cdba64f4-36ba-49e6-a068-74c57c2d16c1"),
                            CreatedAt = new DateTime(2025, 10, 9, 15, 43, 31, 66, DateTimeKind.Utc).AddTicks(3024),
                            PermissionName = "DeleteBook",
                            UpdatedAt = new DateTime(2025, 10, 9, 15, 43, 31, 66, DateTimeKind.Utc).AddTicks(3024)
                        },
                        new
                        {
                            Id = new Guid("50f51955-3cac-4f34-8320-f9297717fa5d"),
                            CreatedAt = new DateTime(2025, 10, 9, 15, 43, 31, 66, DateTimeKind.Utc).AddTicks(3026),
                            PermissionName = "CreateUser",
                            UpdatedAt = new DateTime(2025, 10, 9, 15, 43, 31, 66, DateTimeKind.Utc).AddTicks(3026)
                        },
                        new
                        {
                            Id = new Guid("f0f98a71-fe04-4372-88ea-27a80b3ed0d3"),
                            CreatedAt = new DateTime(2025, 10, 9, 15, 43, 31, 66, DateTimeKind.Utc).AddTicks(3095),
                            PermissionName = "GetUsers",
                            UpdatedAt = new DateTime(2025, 10, 9, 15, 43, 31, 66, DateTimeKind.Utc).AddTicks(3095)
                        },
                        new
                        {
                            Id = new Guid("ed8b616d-9bba-4495-a472-0fd588719851"),
                            CreatedAt = new DateTime(2025, 10, 9, 15, 43, 31, 66, DateTimeKind.Utc).AddTicks(3098),
                            PermissionName = "UpdateUsers",
                            UpdatedAt = new DateTime(2025, 10, 9, 15, 43, 31, 66, DateTimeKind.Utc).AddTicks(3098)
                        },
                        new
                        {
                            Id = new Guid("7fa7a99a-a35c-4600-9aa7-ec01f9098797"),
                            CreatedAt = new DateTime(2025, 10, 9, 15, 43, 31, 66, DateTimeKind.Utc).AddTicks(3100),
                            PermissionName = "DeleteUsers",
                            UpdatedAt = new DateTime(2025, 10, 9, 15, 43, 31, 66, DateTimeKind.Utc).AddTicks(3100)
                        });
                });

            modelBuilder.Entity("AuthService.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6145ce78-b91c-4f48-bcb9-1f6bc4c07f1f"),
                            CreatedAt = new DateTime(2025, 10, 9, 15, 43, 31, 68, DateTimeKind.Utc).AddTicks(4505),
                            RoleName = "Admin",
                            UpdatedAt = new DateTime(2025, 10, 9, 15, 43, 31, 68, DateTimeKind.Utc).AddTicks(4505)
                        },
                        new
                        {
                            Id = new Guid("c1f0d250-acca-44a2-98cd-08e260dcf780"),
                            CreatedAt = new DateTime(2025, 10, 9, 15, 43, 31, 68, DateTimeKind.Utc).AddTicks(4585),
                            RoleName = "Reader",
                            UpdatedAt = new DateTime(2025, 10, 9, 15, 43, 31, 68, DateTimeKind.Utc).AddTicks(4585)
                        });
                });

            modelBuilder.Entity("AuthService.Domain.Entities.RolePermissionEntity", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissionEntity");
                });

            modelBuilder.Entity("AuthService.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("AuthService.Domain.Entities.RolePermissionEntity", b =>
                {
                    b.HasOne("AuthService.Domain.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthService.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("AuthService.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthService.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
