// <auto-generated />
using System;
using AuthService.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AuthService.Persistence.Migrations
{
    [DbContext(typeof(AuthServiceDbContext))]
    [Migration("20251016132412_UserAvatarColumnMigration")]
    partial class UserAvatarColumnMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthService.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PermissionName")
                        .IsUnique();

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5c2fb2f3-24f9-40d5-9d6b-e4be28fd2597"),
                            CreatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(5586),
                            PermissionName = "PostBook",
                            UpdatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(5586)
                        },
                        new
                        {
                            Id = new Guid("f23de730-ef0d-4324-a870-e17d66199171"),
                            CreatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(6904),
                            PermissionName = "ReadBook",
                            UpdatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(6904)
                        },
                        new
                        {
                            Id = new Guid("27459897-3657-4c49-84a1-f25036b9c4dc"),
                            CreatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7035),
                            PermissionName = "UpdateBook",
                            UpdatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7035)
                        },
                        new
                        {
                            Id = new Guid("8350b2a2-5373-44db-8335-0b08f9c18372"),
                            CreatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7037),
                            PermissionName = "DeleteBook",
                            UpdatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7037)
                        },
                        new
                        {
                            Id = new Guid("f0918e6e-1227-448e-91e1-3cab2570d53b"),
                            CreatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7039),
                            PermissionName = "CreateUser",
                            UpdatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7039)
                        },
                        new
                        {
                            Id = new Guid("8e14c1b5-73a5-43e5-8d4b-73d3a2ea0696"),
                            CreatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7048),
                            PermissionName = "GetUsers",
                            UpdatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7048)
                        },
                        new
                        {
                            Id = new Guid("020429ef-f6da-4305-b584-e617be6fd06c"),
                            CreatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7050),
                            PermissionName = "UpdateUsers",
                            UpdatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7050)
                        },
                        new
                        {
                            Id = new Guid("e282232c-d7e6-4c94-b3d5-a524cb0734d8"),
                            CreatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7066),
                            PermissionName = "DeleteUsers",
                            UpdatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7066)
                        },
                        new
                        {
                            Id = new Guid("e5685cef-72f1-4350-9fc3-37491f1f329c"),
                            CreatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7068),
                            PermissionName = "CreateRole",
                            UpdatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7068)
                        },
                        new
                        {
                            Id = new Guid("b060d2bb-22ef-4340-8676-d591704dbc30"),
                            CreatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7071),
                            PermissionName = "GetRoles",
                            UpdatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7071)
                        },
                        new
                        {
                            Id = new Guid("89ca2c60-2775-4e24-a200-8bab4d43b82f"),
                            CreatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7073),
                            PermissionName = "UpdateRoles",
                            UpdatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7073)
                        },
                        new
                        {
                            Id = new Guid("757d7b85-118c-4d96-9805-2fc45510091d"),
                            CreatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7074),
                            PermissionName = "DeleteRoles",
                            UpdatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7074)
                        },
                        new
                        {
                            Id = new Guid("c02aa34c-8b38-401d-ada4-81f4694de773"),
                            CreatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7076),
                            PermissionName = "CreatePermission",
                            UpdatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7076)
                        },
                        new
                        {
                            Id = new Guid("a862da45-010e-4378-95fb-9ad88d9dafd7"),
                            CreatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7077),
                            PermissionName = "GetPermissions",
                            UpdatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7077)
                        },
                        new
                        {
                            Id = new Guid("8fd2c754-b3e8-4a71-a41f-efa5403154da"),
                            CreatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7079),
                            PermissionName = "UpdatePermissions",
                            UpdatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7079)
                        },
                        new
                        {
                            Id = new Guid("d979c4e8-9507-4988-9142-6b50997f2a48"),
                            CreatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7083),
                            PermissionName = "DeletePermissions",
                            UpdatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 523, DateTimeKind.Utc).AddTicks(7083)
                        });
                });

            modelBuilder.Entity("AuthService.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d1653ea-87c2-49a7-b05d-5b83f8d3171a"),
                            CreatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 526, DateTimeKind.Utc).AddTicks(1214),
                            RoleName = "Admin",
                            UpdatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 526, DateTimeKind.Utc).AddTicks(1214)
                        },
                        new
                        {
                            Id = new Guid("500f596c-77c2-4218-aebd-fbc98e02182e"),
                            CreatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 526, DateTimeKind.Utc).AddTicks(1304),
                            RoleName = "Reader",
                            UpdatedAt = new DateTime(2025, 10, 16, 13, 24, 11, 526, DateTimeKind.Utc).AddTicks(1304)
                        });
                });

            modelBuilder.Entity("AuthService.Domain.Entities.RolePermissionEntity", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissionEntity");
                });

            modelBuilder.Entity("AuthService.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAvatar")
                        .HasColumnType("text");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("AuthService.Domain.Entities.RolePermissionEntity", b =>
                {
                    b.HasOne("AuthService.Domain.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthService.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("AuthService.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthService.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
