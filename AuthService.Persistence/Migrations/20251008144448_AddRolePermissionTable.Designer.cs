// <auto-generated />
using System;
using AuthService.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AuthService.Persistence.Migrations
{
    [DbContext(typeof(AuthServiceDbContext))]
    [Migration("20251008144448_AddRolePermissionTable")]
    partial class AddRolePermissionTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthService.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PermissionName")
                        .IsUnique();

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("30a9dd81-84ce-481e-9c54-5b2d3d89c626"),
                            CreatedAt = new DateTime(2025, 10, 8, 14, 44, 48, 113, DateTimeKind.Utc).AddTicks(7908),
                            PermissionName = "PostBook",
                            UpdatedAt = new DateTime(2025, 10, 8, 14, 44, 48, 113, DateTimeKind.Utc).AddTicks(7908)
                        },
                        new
                        {
                            Id = new Guid("983e2c1f-5dd9-42fb-899f-ad6fab48a831"),
                            CreatedAt = new DateTime(2025, 10, 8, 14, 44, 48, 113, DateTimeKind.Utc).AddTicks(9090),
                            PermissionName = "ReadBook",
                            UpdatedAt = new DateTime(2025, 10, 8, 14, 44, 48, 113, DateTimeKind.Utc).AddTicks(9090)
                        },
                        new
                        {
                            Id = new Guid("d548b93f-d2a2-46f5-af90-ba51429e2e75"),
                            CreatedAt = new DateTime(2025, 10, 8, 14, 44, 48, 113, DateTimeKind.Utc).AddTicks(9227),
                            PermissionName = "UpdateBook",
                            UpdatedAt = new DateTime(2025, 10, 8, 14, 44, 48, 113, DateTimeKind.Utc).AddTicks(9227)
                        },
                        new
                        {
                            Id = new Guid("cd07830b-75fd-4a13-8cac-f23006b95d96"),
                            CreatedAt = new DateTime(2025, 10, 8, 14, 44, 48, 113, DateTimeKind.Utc).AddTicks(9229),
                            PermissionName = "DeleteBook",
                            UpdatedAt = new DateTime(2025, 10, 8, 14, 44, 48, 113, DateTimeKind.Utc).AddTicks(9229)
                        });
                });

            modelBuilder.Entity("AuthService.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e66d5c22-8d2c-4a8a-a773-46df66ce6c4c"),
                            CreatedAt = new DateTime(2025, 10, 8, 14, 44, 48, 116, DateTimeKind.Utc).AddTicks(7067),
                            RoleName = "Admin",
                            UpdatedAt = new DateTime(2025, 10, 8, 14, 44, 48, 116, DateTimeKind.Utc).AddTicks(7067)
                        },
                        new
                        {
                            Id = new Guid("723e0026-7add-4adf-bb66-a97ce406d9d6"),
                            CreatedAt = new DateTime(2025, 10, 8, 14, 44, 48, 116, DateTimeKind.Utc).AddTicks(7185),
                            RoleName = "Reader",
                            UpdatedAt = new DateTime(2025, 10, 8, 14, 44, 48, 116, DateTimeKind.Utc).AddTicks(7185)
                        });
                });

            modelBuilder.Entity("AuthService.Domain.Entities.RolePermissionEntity", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "PermissionId");

                    b.ToTable("RolePermissionEntity");
                });

            modelBuilder.Entity("AuthService.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("AuthService.Persistence.RolePermissions", b =>
                {
                    b.Property<Guid>("PermissionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<string[]>("Permissions")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PermissionsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("AuthService.Persistence.RolePermissions", b =>
                {
                    b.HasOne("AuthService.Domain.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthService.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("AuthService.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthService.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
